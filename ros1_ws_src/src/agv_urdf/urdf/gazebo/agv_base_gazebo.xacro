<?xml version="1.0"?>
<robot name="mbot" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:arg name="laser_visual"  default="false"/>

    <!-- PROPERTY LIST -->
    <xacro:property name="M_PI" value="3.1415926"/>
    <xacro:property name="base_mass"   value="20" /> 
    <xacro:property name="base_length" value="0.8"/>
    <xacro:property name="base_width"  value="0.45"/>
    <xacro:property name="base_height" value="0.04"/>

    <xacro:property name="wheel_mass"   value="2" />
    <xacro:property name="wheel_radius" value="0.09"/>
    <xacro:property name="wheel_thickness" value="0.05"/>
    <xacro:property name="wheel_distance" value="0.535"/>

    <xacro:property name="caster_mass"    value="0.5" />
    <xacro:property name="caster_radius" value="0.05"/> 
    <xacro:property name="caster_joint_x" value="0.35"/>
    <xacro:property name="caster_joint_y" value="0.175"/> <!-- base_width/2 - caster_radius -->
    <xacro:property name="caster_joint_z" value="0.07"/>  <!-- caster_radius + (base_height) / 2 -->

    <xacro:property name="wheel_joint_y" value="0.2425"/> <!-- (wheel_distance - wheel_thickness) / 2 -->
    <xacro:property name="wheel_joint_z" value="0.03"/> <!-- base_height/2 + (2*caster_radius - wheel_radius) -->

    <!-- Defining the colors used in this robot -->
    <material name="yellow">
        <color rgba="1 0.4 0 1"/>
    </material>
    <material name="black">
        <color rgba="0 0 0 0.95"/>
    </material>
    <material name="gray">
        <color rgba="0.75 0.75 0.75 1"/>
    </material>
    
    <!-- Macro for inertia matrix -->
    <xacro:macro name="sphere_inertial_matrix" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0"
                iyy="${2*m*r*r/5}" iyz="0" 
                izz="${2*m*r*r/5}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial_matrix" params="m r h">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
                iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
                izz="${m*r*r/2}" /> 
        </inertial>
    </xacro:macro>

    <xacro:macro name="box_inertial_matrix" params="m a b c">
       <inertial>
          <mass value="${m}" />
           <inertia ixx="${m*(b*b+c*c)/12}" ixy = "0" ixz = "0"
              iyy="${m*(c*c+a*a)/12}" iyz = "0"
              izz="${m*(a*a+b*b)/12}" /> 
       </inertial>
    </xacro:macro>

    <!-- Macro for robot wheel -->
    <xacro:macro name="wheel" params="prefix reflect">
        <joint name="${prefix}_wheel_joint" type="continuous">
            <origin xyz="0 ${reflect*wheel_joint_y} ${-wheel_joint_z}" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="${prefix}_wheel_link"/>
            <axis xyz="0 1 0"/>
        </joint>

        <link name="${prefix}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length = "${wheel_thickness}"/>
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length = "${wheel_thickness}"/>
                </geometry>
            </collision>
            <cylinder_inertial_matrix  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_thickness}" />
        </link>

        <gazebo reference="${prefix}_wheel_link">
            <material>Gazebo/Gray</material>
        </gazebo>

        <!-- Transmission is important to link the joints and the controller -->
        <transmission name="${prefix}_wheel_joint_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${prefix}_wheel_joint" >
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="${prefix}_wheel_joint_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>

    <!-- Macro for robot caster -->
    <xacro:macro name="caster" params="prefix lr fb">
         <joint name="${prefix}_caster_joint" type="continuous">
            <origin xyz="${fb*caster_joint_x} ${lr*caster_joint_y} ${-caster_joint_z}" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="${prefix}_caster_link"/>
            <axis xyz="0 1 0"/>
        </joint>

        <link name="${prefix}_caster_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
                <material name="black" />
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
            </collision>      
            <sphere_inertial_matrix  m="${caster_mass}" r="${caster_radius}" />
        </link>

        <gazebo reference="${prefix}_caster_link">
            <material>Gazebo/Black</material>
        </gazebo>
    </xacro:macro>

    <xacro:macro name="mbot_base_gazebo">
        <link name="base_footprint">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <box size="0.001 0.001 0.001" />
                </geometry>
            </visual>
        </link>
        <gazebo reference="base_footprint">
            <turnGravityOff>false</turnGravityOff>
        </gazebo>

        <joint name="base_footprint_joint" type="fixed">
            <origin xyz="0 0 ${base_height/2 + caster_radius*2}" rpy="0 0 0" />        
            <parent link="base_footprint"/>
            <child link="base_link" />
        </joint>

        <link name="base_link">
            <visual>
                <origin xyz=" 0 0 0" rpy="0 0 0" />
                <geometry>
                    <box size="${base_length} ${base_width} ${base_height}"/>
                </geometry>
                <material name="yellow"/>
            </visual>
            <collision>
                <origin xyz=" 0 0 0" rpy="0 0 0" />
                <geometry>
                    <box size="${base_length} ${base_width} ${base_height}" />
                </geometry>
            </collision>   
            <box_inertial_matrix  m="${base_mass}" a="${base_length}" b="${base_width}" c="${base_height}" />
        </link>

        <gazebo reference="base_link">
            <material>Gazebo/Blue</material>
        </gazebo>

        <wheel prefix="left" reflect="1"/>
        <wheel prefix="right" reflect="-1"/>

        <caster prefix="lf" lr="1" fb="1"/>
        <caster prefix="lb" lr="1" fb="-1"/>
        <caster prefix="rf" lr="-1" fb="1"/>
        <caster prefix="rb" lr="-1" fb="-1"/>


        <!-- controller -->
        <gazebo>
            <plugin name="differential_drive_controller" 
                    filename="libgazebo_ros_diff_drive.so">
                <rosDebugLevel>Debug</rosDebugLevel>
                <publishWheelTF>false</publishWheelTF>
                <publishOdomTF>true</publishOdomTF>
                <robotNamespace>/</robotNamespace>
                <publishTf>1</publishTf>
                <publishWheelJointState>false</publishWheelJointState>
                <alwaysOn>true</alwaysOn>
                <updateRate>500.0</updateRate>
                <legacyMode>false</legacyMode>
                <leftJoint>left_wheel_joint</leftJoint>
                <rightJoint>right_wheel_joint</rightJoint>
                <!-- <wheelSeparation>${wheel_joint_y*2}</wheelSeparation>
                <wheelDiameter>${2*wheel_radius}</wheelDiameter> -->
                <wheelSeparation>0.535</wheelSeparation>
                <wheelDiameter>0.18</wheelDiameter>
                <broadcastTF>1</broadcastTF>
                <wheelTorque>30</wheelTorque>
                <wheelAcceleration>1.8</wheelAcceleration>
                <commandTopic>cmd_vel</commandTopic>
                <odometryFrame>odom</odometryFrame> 
                <odometryTopic>odom</odometryTopic> 
                <odometrySource>world</odometrySource>
                <robotBaseFrame>base_footprint</robotBaseFrame>
            </plugin>
        </gazebo> 


        <gazebo reference="laser1_link">
            <material>Gazebo/FlatBlack</material>
            <sensor type="ray" name="lds_lfcd_sensor">
                <pose>0 0 0 0 0 0</pose>
                <visualize>$(arg laser_visual)</visualize>
                <update_rate>15</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>270</samples>
                            <resolution>1</resolution>
                            <min_angle>-2.356</min_angle>
                            <max_angle>2.356</max_angle>
                        </horizontal>
                    </scan>
                    <range>
                        <min>0.05</min>
                        <max>10.0</max>
                        <resolution>0.015</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.001</stddev>
                    </noise>
                </ray>
                <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_laser.so">
                    <topicName>scan_1</topicName>
                    <frameName>laser1_link</frameName>
                </plugin>
            </sensor>
        </gazebo>

        <gazebo reference="laser2_link">
            <material>Gazebo/FlatBlack</material>
            <sensor type="ray" name="lds_lfcd_sensor_2">
                <pose>0 0 0 0 0 0</pose>
                <visualize>$(arg laser_visual)</visualize>
                <update_rate>15</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>270</samples>
                            <resolution>1</resolution>
                            <min_angle>-2.356</min_angle>
                            <max_angle>2.356</max_angle>
                        </horizontal>
                    </scan>
                    <range>
                        <min>0.05</min>
                        <max>10.0</max>
                        <resolution>0.015</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.001</stddev>
                    </noise>
                </ray>
                <plugin name="gazebo_ros_lds_lfcd_controller_2" filename="libgazebo_ros_laser.so">
                    <topicName>scan_2</topicName>
                    <frameName>laser2_link</frameName>
                </plugin>
            </sensor>
        </gazebo>
    </xacro:macro>

</robot>
